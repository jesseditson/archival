use serde::{Deserialize, Serialize};
#[cfg(feature = "wasm-fs")]
use typescript_type_def::TypeDef;

#[derive(Debug, Serialize, Deserialize)]
#[cfg_attr(feature = "wasm-fs", derive(TypeDef))]
pub enum ArchivalEvent {
    AddObject(AddObjectEvent),
}

#[derive(Debug, Serialize, Deserialize)]
#[cfg_attr(feature = "wasm-fs", derive(TypeDef))]
pub struct AddObjectEvent {
    pub object: String,
    pub filename: String,
    pub order: i32,
}

#[cfg(test)]
#[cfg(feature = "wasm-fs")]
mod export_types {
    use std::fs;
    use typescript_type_def::{write_definition_file, DefinitionFileOptions};

    use super::*;

    #[test]
    fn run() {
        let mut buf = Vec::new();
        let options = DefinitionFileOptions {
            header: Some("// AUTO-GENERATED by typescript-type-def\n"),
            root_namespace: None,
        };
        write_definition_file::<_, ArchivalEvent>(&mut buf, options).unwrap();
        fs::write("./events.d.ts", buf).expect("Failed to write file");
    }
}
